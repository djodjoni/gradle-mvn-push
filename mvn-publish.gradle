/*
 * Copyright (C) 2014 Kalin Maldzhanski
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
apply plugin: 'maven-publish'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}
def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}
def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}
def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allSource
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier = 'javadoc'
    from javadocs.destinationDir
}

signing {
    required { isReleaseBuild() && gradle.taskGraph.hasTask("publishMavenPublicationToMavenRepository") }
    sign configurations.archives
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocsJar
            groupId GROUP
            artifactId = POM_ARTIFACT_ID
            version VERSION_NAME

            pom.packaging POM_PACKAGING
            pom.withXml {
                asNode().appendNode('name', POM_NAME)
                asNode().appendNode('description', POM_DESCRIPTION)
                asNode().appendNode('url', POM_URL)

                def scmNode = asNode().appendNode('scm')
                scmNode.appendNode('url', POM_SCM_URL)
                scmNode.appendNode('connection', POM_SCM_CONNECTION)
                scmNode.appendNode('developerConnection', POM_SCM_DEV_CONNECTION)

                def licenseNode = asNode().appendNode('licenses').appendNode('license')
                licenseNode.appendNode('name', POM_LICENCE_NAME)
                licenseNode.appendNode('url', POM_LICENCE_URL)
                licenseNode.appendNode('distribution', POM_LICENCE_DIST)

                def developerNode = asNode().appendNode('developers').appendNode('developer')
                developerNode.appendNode('id', POM_DEVELOPER_ID)
                developerNode.appendNode('name', POM_DEVELOPER_NAME)
            }
        }
    }

    repositories {
        maven {
                credentials {
                    username getRepositoryUsername()
                    password getRepositoryPassword()
                }
                if(isReleaseBuild()) {
                    url getReleaseRepositoryUrl()
                } else {
                    url getSnapshotRepositoryUrl()
                }
        }
    }
}
